package ch.ocn.OCNEval;

import javax.ws.rs.Path;


import java.sql.SQLException;

import javax.ws.rs.PathParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import com.google.gson.Gson;

import ch.ocn.OCNEval.data.Profile;
import ch.ocn.OCNEval.sql.SqlRequest;

/*
 * Lorsque l'URL d'une requête est comme suit : http://localhost:8080/OCNEval/webapi/profiles,
 * c'est cette classe qui sera utilisée pour y répondre
 */
@Path("profiles")
public class ProfileResource {
	
	//Constructeur par défaut
	public ProfileResource() {
		
	}
	
	
	@GET //Lorsqu'une requête HTTP GET est effectuée à /profiles
	@Produces(MediaType.APPLICATION_JSON) //La réponse produira un json
	public Response getProfilesJson() throws SQLException { //Permet de récupérer tous les profils de la BDD
		String request = "SELECT * FROM profile WHERE valid='1';"; //Récupère tous les profils valides
		
		//Envoi de la réponse avec tous les profils sous forme de json
		return Response.status(Response.Status.OK).entity(SqlRequest.requestProfiles(request)).build();
	}
	
	@POST //Lorsqu'un requête HTTP POST est effectuée à /profiles
	@Consumes(MediaType.APPLICATION_JSON) //La réponse consomme un json
	public Response addProfiles(String profileJson) throws SQLException { //Permet d'enregistrer un profil dans la BDD
		Gson gson = new Gson(); //Instanciation d'un objet Gson
		Profile profile = gson.fromJson(profileJson, Profile.class); //Création d'un objet Profile à partir du json envoyé par HTTP
		if (profile.getValidityDate().equals("")) { //Si la date de validité n'est pas renseignée
			profile.setValidityDate("NULL"); //La valeur NULL y est associée afin de pouvoir l'enregistrer dans la BDD
		} else { //Sinon
			profile.setValidityDate("'" + profile.getValidityDate() + "'"); //Ajout des guillemets afin de pouvoir écrire une requête SQL valide
		}
		//Écriture de la requête
		String request = "INSERT INTO profile VALUES (NULL, '" + profile.getName() + "', '" + profile.getDescription() + "', " + profile.getValidityDate() + ", 1);";
		SqlRequest.addProfile(request); //Permet d'ajouter le profil dans la BDD
		
		return Response.status(200).build(); //La réponse informe le client que tout s'est bien passé
	}
	
	//Lorsqu'une requête HTTP GET est effectuée à profiles/id
	@GET
	@Path("{profileId}")
	@Produces(MediaType.APPLICATION_JSON) //La réponse produit un json
	public Response getProfileJson(@PathParam("profileId") String profileId) throws SQLException { //Permet de récupérer un profil bien précis de la BDD
		//Écriture de la requête permettant de récupérer les informations du profil voulu
		String requestProfile = "SELECT * FROM profile WHERE id='" + profileId + "' AND valid = '1';";
		//Écriture de la requête permettant de récupérer les sections qui lui sont liés
		String requestSections = "SELECT section.* FROM section, profile_section_junction WHERE profile_section_junction.profile_id='" + profileId + "' AND section.id = profile_section_junction.section_id AND section.valid = '1';";
		
		//Envoi de la réponse avec les informations sur le profil et sur toutes ses sections qu'il contient
		return Response.status(Response.Status.OK).entity(SqlRequest.requestProfile(requestProfile, requestSections)).build();
	}
	
	//Lorsqu'un requête HTTP PUT est effectuée à profiles/id
	@PUT
	@Path("{profileId}")
	@Consumes(MediaType.APPLICATION_JSON) //La réponse consomme un json
	public Response modifyProfile(@PathParam("profileId") String profileId, String profileJson) throws SQLException { //Permet de modifier les informations d'un profil en récupérer l'ID depuis l'URL
		Gson gson = new Gson(); //Instanciation d'un objet Gson 
		Profile profile = gson.fromJson(profileJson, Profile.class); //Création d'un objet Profile à partir du json envoyé par HTTP
		//Écriture de la requête permettant de modifier les informations du profile
		String request = "UPDATE profile SET name = '" + profile.getName() + "', description = '" + profile.getDescription() + "', validity_date = '" + profile.getValidityDate() + "' WHERE id = '" + profileId + "';";
		SqlRequest.modifyProfile(request); //Exécution de la requête
		
		return Response.status(200).build(); //La réponse informe le client que tout s'est bien passé
	}
	
	//Lorsqu'une requête HTTP DELETE est effectuée à profiles/id
	@DELETE
	@Path("{profileId}")
	public Response deleteProfile(@PathParam("profileId") String profileId) throws SQLException {
		String request = "UPDATE profile SET valid = '0' WHERE id='" + profileId + "';";
		SqlRequest.deleteProfile(request);
		
		return Response.status(200).build();
	}
}